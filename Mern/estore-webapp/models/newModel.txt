public class Store : BaseGT
    {
        /// <summary>
        /// It should be autoGenerated or Manual Based on App permission. 
        /// </summary>
        [Key]
        [Display(Name = "Code")]
        public string StoreCode { get; set; }

        [Display(Name = "Store")]
        public string StoreName { get; set; }

        public string Address { get; set; }
        public string City { get; set; }

        [Display(Name = "Pin Code")]
        public string PinCode { get; set; }

        [Display(Name = "Contact")]
        public string PhoneNo { get; set; }

        [Display(Name = "Store Manager")]
        public string StoreManagerName { get; set; }

        [Display(Name = "SM Contact No")]
        public string StoreManagerPhoneNo { get; set; }

        [Display(Name = "PAN No")]
        public string PanNo { get; set; }

        [Display(Name = "GSTIN ")]
        public string GSTNO { get; set; }

        [Display(Name = "Employees Count")]
        public int NoOfEmployees { get; set; }

        [DataType(DataType.Date), DisplayFormat(DataFormatString = "{0:yyyy-MM-dd}", ApplyFormatInEditMode = true)]
        [Display(Name = "Opening Date")]
        public DateTime OpeningDate { get; set; }

        [DataType(DataType.Date), DisplayFormat(DataFormatString = "{0:yyyy-MM-dd}", ApplyFormatInEditMode = true)]
        [Display(Name = "Closing Date")]
        public DateTime? ClosingDate { get; set; }

        [Display(Name = "Operative")]
        public bool Status { get; set; }

       // public int? CompanyId { get; set; }
       // public virtual Company Company { get; set; }
    }
public class Salesman : BaseST
    {
        
        [Display(Name = "Salesman")]
        public string SalesmanName { get; set; }

        
        [ForeignKey("Employee")]
        public string? EmployeeId { get; set; }
        
        [ForeignKey("EmployeeId")]
        public virtual Employee Employee { get; set; }
    }
    public class Company
    {
        public int Id { get; set; }
        public string Name { get; set; }
        public string Address { get; set; }
        public string PhoneNo { get; set; }
        public string ContactPersonName { get; set; }
        public string ContactPersonEmail { get; set; }
        public string ContactPersonPhoneNo { get; set; }
        public string WebSite { get; set; }

        public virtual ICollection<Store> Stores { get; set; }
    }


    public class User
    {
        public int UserId { get; set; }
        public string UserName { get; set; }
        public string Password { get; set; }
        public bool IsActive { get; set; }
        public bool IsEmployee { get; set; }
        public string FullName { get; set; }
        public int StoreId { get; set; }
        public int? EmployeeId { get; set; }
        public UserType UserType { get; set; }
    }


    public class Voucher:BaseST
    {
        //public int Id { get; set; }
        [Key]
        public string VoucherNumber { get; set; }
        public DateTime OnDate { get; set; }
        public VoucherTypes VoucherType { get; set; }
        public string PartyName { get; set; }
        public decimal Amount { get; set; }
        public string Remarks { get; set; }
        //Vocher Issued By:
        public int EmployeeId { get; set; }
        public PaymentMode PaymentMode { get; set; }
        public string TranscationDetails { get; set; }
        // Transcation reflected in Bank
        public int BankAccountId { get; set; }
        public int PartyId { get; set; }
        public string SlipNo { get; set; }

       // Addition Details for Party and Ledgers

        
    }

    //TODO: Create a function to genrate vocher Number in function area

    public class CashVoucher : BaseST
    {
        //public int Id { get; set; }
        [Key]
        public string VoucherNumber { get; set; }
        public DateTime OnDate { get; set; }
        public VoucherTypes VoucherType { get; set; }
        public int TranscationTypeId {get;set;}
        public string PartyName { get; set; }
        public decimal Amount { get; set; }
        public string Remarks { get; set; }
        //Vocher Issued By:
        public int EmployeeId { get; set; }
        public PaymentMode PaymentMode { get; set; }
        public string TranscationDetails { get; set; }
        // Transcation reflected in Bank
        public int BankAccountId { get; set; }
        public int PartyId { get; set; }
        public string SlipNo { get; set; }

        // Addition Details for Party and Ledgers

        public static string GenerateVocherNumber(CashCVoucherType vocher, int StoreId)
        {
            var StoreCode = " JHC0006"; // Fetch from DataBase;
            string TypeName = vocher.ToString();
            string VoucherNumber = $"{StoreCode}/{TypeName}/{DateTime.Today.Year}{DateTime.Today.Month}{DateTime.Today.Day}";
            int count = 0;
            //count=(_context.Vochers.Where(c=>StoreId==StoreId && c.OnDate.Date==DateTime.Today.Date && c.VoucherType==vocher).Count())+1;
            string countName = "";
            if (count > 0 && count < 10) countName = "000" + count;
            else if (count > 9 && count < 100) countName = "00" + count;
            else if (count > 99 && count < 1000) countName = "0" + count;
            else countName = "" + count;

            return (VoucherNumber + countName);
        }
    }

    public class Note:BaseST
    {
        [Key]
        public string NoteNumber { get; set; }
        public DateTime OnDate { get; set; }
        public NoteTyes NoteTyes { get; set; }

        public string PartyName { get; set; }
        public int PartyId { get; set; }

        public decimal Amount { get; set; }
        public bool WithGST { get; set; }
        public decimal TaxAmount { get; set; }

        public string Reason { get; set; }
        public string Remarks { get; set; }

        
    }

    public class VendorNotes : Note
    {
        public int VendorId { get; set; }
        // public INT.
        
    }
     public class RentedProperty : BaseGT
    { 
        public string LocationName { get; set; }
        public string Address { get; set; }
        public string OwnerName { get; set; }
        public string ContactNumber { get; set; }
        public DateTime OnDate { get; set; }
        public DateTime? VacateDate { get; set; }
        public bool Occupied { get; set; }
        public decimal AdvanceAmount { get; set; }
        public RentType RentType { get; set; }
        public string Remarks { get; set; }
    }


    public class Rent:BaseST
    {
        public DateTime OnDate { get; set; }
        public int RentedPropertyId { get; set; }
        public int Period { get; set; }
        public decimal Amount { get; set; }
        public string Remarks { get; set; }
    }

    public class EletricityConnection : BaseST
    {
        public DateTime OnDate { get; set; }
        public DateTime? DisconnectionDate { get; set; }
        public bool Active { get; set; }
        public int Load { get; set; }
        public ConnectionType ConnectionType { get; set; }
        public string Name { get; set; }
        public string Address { get; set; }
        public string ConnectionNumber { get; set; }
        public string OtherConnectionDetails { get; set; }
    }
    public class EletricityBill : BaseST
    {
        public DateTime OnDate { get; set; }
        public string BillNumber { get; set; }
        public decimal Amount { get; set; }
        public DateTime DueDate { get; set; }
        public int ConnectionId { get; set; }
        public bool Paid { get; set; }
    }
    public class EletricityBillPayment : BaseST
    {
        public DateTime OnDate { get; set; }
        public string BillNumber { get; set; }
        public string RecieptNumber { get; set; }
        public decimal Amount { get; set; }
        public int ConnectionId { get; set; }
        public PaymentMode Mode { get; set; }
        public string Remarks { get; set; }

    }
    public class Bank
    {
        public int Id { get; set; }
        public string BankName { get; set; }
       
    }
    public class BankAccount
    {
        public int Id { get; set; }
        public int BankId { get; set; }
        public string AccountNumber { get; set; }
        public string Branch { get; set; }
        public string IFSCode { get; set; }
        public AccountType AccountType { get; set; }
        public bool Active { get; set; }

    }
    public class DailySale : BaseST
    {
        [Key]
        public string InvoiceNumber { get; set; }
        public DateTime OnDate { get; set; }
        public decimal Amount { get; set; }
        public decimal CashAmount { get; set; }

        public bool SaleReturn { get; set; }
        public bool ManualInvoice { get; set; }
        public bool TailoringBill { get; set; }

        public bool Due { get; set; }

        public int SalesmanId { get; set; }

        public PayMode PaymentMode { get; set; }
        //InvoicePayment will be linked with InvoiceNumber

    }

    //Note: When a Daily Sale is created a invoice basic entry will be added. vice versa when Invoice is added
    // DailySale is created. so Store Manager should know it has to make entry.
public class Employee : BaseST
    {
        /// <summary>
        /// It should be autoGenerated while data is saved.
        /// </summary>
        [Key]
        public string EmployeeId { get; set; }

        [Display(Name = "First Name")]
        public string FirstName { get; set; }

        [Display(Name = "Last    Name")]
        public string LastName { get; set; }

        [Display(Name = "Employee Name")]
        public string StaffName { get { return (FirstName + " " + LastName).Trim(); } }

        [Display(Name = "Mobile No"), Phone]
        public string MobileNo { get; set; }

        [DataType(DataType.Date), DisplayFormat(DataFormatString = "{0:yyyy-MM-dd}", ApplyFormatInEditMode = true)]
        [Display(Name = "Joining Date")]
        public DateTime JoiningDate { get; set; }

        [DataType(DataType.Date), DisplayFormat(DataFormatString = "{0:yyyy-MM-dd}", ApplyFormatInEditMode = true)]
        [Display(Name = "Leaving Date")]
        public DateTime? LeavingDate { get; set; }

        [Display(Name = "Working")]
        public bool IsWorking { get; set; }

        [Display(Name = "Job Category")]
        [DefaultValue(0)]
        public EmpType Category { get; set; }

        [Display(Name = "eMail"), EmailAddress]
        public string EMail { get; set; }

        [DataType(DataType.Date), DisplayFormat(DataFormatString = "{0:yyyy-MM-dd}", ApplyFormatInEditMode = true)]
        [Display(Name = "Date Of Birth")]
        public DateTime DateOfBirth { get; set; }

        public string AdharNumber { get; set; }
        public string PanNo { get; set; }
        public string OtherIdDetails { get; set; }
        public string Address { get; set; }
        public string City { get; set; }
        public string State { get; set; }
        public string FatherName { get; set; }
        public string HighestQualification { get; set; }

        public ICollection<Salesman> Salesmen { get; set; }
        public ICollection<Attendance> Attendances { get; set; }

    }

    public class Attendance : BaseST
    {
        [Display(Name = "Staff Name")]
        [ForeignKey("Employee")]
        public string EmployeeId { get; set; }

        public virtual Employee Employee { get; set; }

        [DataType(DataType.Date), DisplayFormat(DataFormatString = "{0:yyyy-MM-dd}", ApplyFormatInEditMode = true)]
        [Display(Name = "Attendance Date")]
        public DateTime AttDate { get; set; }

        [Display(Name = "Entry Time")]
        public string EntryTime { get; set; }

        public AttUnit Status { get; set; }
        public string Remarks { get; set; }

        [Display(Name = "Tailor")]
        public bool IsTailoring { get; set; }
    }
    public class SalaryPayment : BaseST
    {

        [Display(Name = "Staff Name")]
        [ForeignKey("Employee")]
        public string EmployeeId { get; set; }

        public Employee Employee { get; set; }

        [Display(Name = "Salary/Year")]
        public string SalaryMonth { get; set; }

        [Display(Name = "Payment Reason")]
        public SalaryComponet SalaryComponet { get; set; }

        [DataType(DataType.Date), DisplayFormat(DataFormatString = "{0:yyyy-MM-dd}", ApplyFormatInEditMode = true)]
        [Display(Name = "Payment Date")]
        public DateTime OnDate { get; set; }

        [DataType(DataType.Currency), Column(TypeName = "money")]
        public decimal Amount { get; set; }

        [Display(Name = "Payment Mode")]
        public PayMode PayMode { get; set; }

        public string Details { get; set; }

        //[Display(Name = "Party")]
        //public int? PartyId { get; set; }

        //public virtual Party Party { get; set; }
    }
public class Invoice:BaseST
    {
        [Key]
        public string InvoiceNumber { get; set; }
        public InvoiceType InvoiceType { get; set; } // Fetch Enum for invoiceType.
        public DateTime OnDate { get; set; }
        public int CustomerId { get; set; }
        public string MobileNo { get; set; }

        public decimal TotalAmount { get; set; }
        public decimal TotalDiscount { get; set; }
        public decimal TotalTaxAmount { get; set; }
        public double TotalQuantity { get; set; }

        public virtual InvoicePayment Payment { get; set; }
        public virtual ICollection<InvoiceItem> InvoiceItems { get; set; }


    }

    public class InvoiceItem
    {
        [Key]
        public string InvoiceNumber { get; set; }
        public string Barcode { get; set; }
        public double Quantity { get; set; }
        public decimal DiscountAmount { get; set; }
        public decimal BasicPrice { get; set; }
        public decimal TaxAmount { get; set; }

    }


    public class InvoicePayment
    {
        [Key]
        public string InvoiceNumber { get; set; }
        public DateTime OnDate { get; set; }
        public PayMode PaymentMode { get; set; }
        public decimal Amount { get; set; }
        public decimal CashAmount { get; set; }
        public decimal NonCashAmount { get; set; }
        public string PaymentRef { get; set; }
        public string PaymentDetails { get; set; }
        public string Remarks { get; set; }
    }

    public class InvoicePrint
    {
        [Key]
        public string InvoiceNumber { get; set; }
        public DateTime LastPrintedOn { get; set; }
        public bool OrginalPrinted { get; set; }
        public int Reprinted { get; set; }
    }

    public class ProductStock : BaseST
    {
        public string Barcode { get; set; }
        public string ProductName { get; set; }
        public double Stock { get; set; }
        public decimal MRP { get; set; }
        public decimal TaxRate { get; set; }

    }
    public class Stock : BaseST
    {
        public string Barcode { get; set; }
        public decimal Cost { get; set; }
        public double PurchaseQty { get; set; }
        public double SoldQty { get; set; }
        public double HoldQty { get; set; }
        public double CurrentStock { get { return (PurchaseQty - SoldQty - HoldQty); } }
        
    }

    public class BaseGT
    {

        public int Id { get; set; }
        public string UserId { get; set; }
        public bool IsReadOnly { get; set; }
    }

    public class BaseST
    {
        public int Id { get; set; }
        public int StoreId { get; set; }
       // public virtual Store Store { get; set; }
       //TODO: Note: Store should be in Common Model
        public string UserId { get; set; }
        public bool IsReadOnly { get; set; }

    }

    public class BaseLocal
    {
        public int LocalId { get; set; }
        public bool IsSync { get; set; }

    }